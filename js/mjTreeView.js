$(document).ready(function () {

    // node data structure:

    // {id: int, mandatory. If omitted one will be generated
    // text: string
    // image: string (default null)
    // open_icon: image to use for open state (default null)
    // closed_icon: image to use for closed state (default null)
    // selected: true,false (ignored is show_checkbox is true)
    // checked: 0|1|2, 0 is not checked, 1 is checked, 2 is half ticked (ignored if show_checkbox is false)
    // disabled: true or false (default false)
    // data: null   user defined data
    // items: if is_hierarchy is true items array will contain subnodes

    // TBD:
    // write my own version of drag and drop
    // fix custom icons
    // allow function for text field
    // fix update function
    // virtual rendering
    // disabled does nothing
    // user custom data
    // return level property in toArray, getItem, etc
    // themes
    // width, height
    // disabled
    // _enableKeyEvents
    // wrap_text

    (function ($) {
    
        var mjTreeView = {

            init: function (options, el) {

                this.widget_class = "mjSuperGrid";

                this.default_settings = {
                    items: [],
                    data_type: "tree",          // tree or flat
                    show_checkboxes: false,               // checkbox, text, null (if a itemRender is defined the text is generated by that function)
                    itemRender: null,           // custom rendering function each each item. signature: itemRender(item)
                 
                    animation_duration: 0,      // time in milliseconds, 0 for no animation
                    recursive: true,            // if true selecting a node selects all child nodes and their parents       
                    multi_select: false,         // 
                    dragdrop: false,
                    sublist_indent: 16,         // sublist indent
                    wrap_text: false,

                    // properties common to all controls
                    
                    width: '100%',
                    height: '100%',
                    disabled: false,                    
                    theme: null
                };

               

                this.settings = $.extend({}, this.default_settings, options);    // options overrides default

                if (this.settings.items_type == "flat")
                    this._createHierarchy();

                this._validateData(this.settings.items);

                this.el = el;
                this.$el = $(el);                

                // plugin have been applied previously
                // blow away any existing instance

                this.close();

                this._render();

                this._startListening();
            },

            //----------------------------------------------------------------------------------------------------------
            // private functions

            _createHierarchy: function () {

                var self = this;
                var s = this.settings;

                var tree = [];

                // get top level nodes

                for (var i = 0; i < s.items.length; i++)
                {
                    var o = s.items[i];

                    if (o.pid === undefined)
                        o.pid = null;

                    if (o.pid == null)              
                        tree.push(o);  
                }

                function _createHierarchy2(items, collection) {

                    var self = this;

                    if (!items)
                        return;

                    // convert nestdSet form to mjTreeView form:
                    // see: nestedSet form: http://www.sitepoint.com/hierarchical-data-database/

                    $.each(items, function (i, x) {

                        // find the children of this node

                        $.each(collection, function(j, o) {

                            if (x.id == o.pid) {

                                if (!x.items)
                                    x.items = [];

                                x.items.push(o);
                            }
                        });

                        _createHierarchy2(x.items, collection);
                    });
                }

                _createHierarchy2(tree, s.items);

                s.items = tree;
            },           

            _validateItem: function(o)
            {
                var default_item = {id: null,
                    text: "",
                    image: null,
                    open_icon: null,
                    closed_icon: null,
                    selected: null,
                    checked: null,
                    disabled: false,
                    data: null,
                    items: null
                };

                var x = $.extend({}, default_item, o);  // o overrides default

                $.extend(o, x);
                
                // every node must have an id

                if (!o.id)
                    o.id = mjcore.generateId();

                // valid values of selected is true,false
                // checked and selected are mutually exclusive

                if (this.settings.show_checkboxes) {

                    // valid values for checked is 0,1,2

                    switch (String(o.checked))
                    {
                        case "false": o.checked = 0; break;
                        case "true": o.checked = 1; break;
                        case "0": o.checked = 0; break;
                        case "1": o.checked = 1; break;
                        case "2": o.checked = 2; break;

                        default:
                            o.checked = 0;
                            break;
                    }

                    o.selected = null;
                }
                else {

                    switch (String(o.selected))
                    {
                        case "0": o.selected = false; break;
                        case "1": o.selected = true; break;
                        case "true": o.selected = true; break;
                        case "false": o.selected = false; break;

                        default:
                            o.selected = false;
                    }

                    o.checked = null;
                }

                switch (String(o.disabled))
                {
                    case "0": o.disabled = false; break;
                    case "1": o.disabled = true; break;
                    case "true": o.disabled = true; break;
                    case "false": o.disabled = false; break;

                    default:
                        o.disabled = false;
                }

                return o;
            },

            _validateData: function(items)
            {
                var self = this;

                if (!items || items.length == 0)
                    return;

                var map = {};

                $.each(items, function (index, o) {

                    self._validateItem(o);

                    if (map[o.id])
                        mjcore.mjError("mjTreeView Error: duplicate id: " + o.id + " found in data. Ids must be unique.");

                    map[o.id] = o.id;

                    if (o.items)
                        self._validateData(o.items);
                });
            },

            _startListening: function () {

                var self = this;
                var s = this.settings;

                // we may be recreating the plugin for the second time
                // if we do not stop listening to events on the element we get strange behaviour

                this._stopListening();

                this.$el.on("click", ".mj-expander", function (e) {

                    e.preventDefault();
                    e.stopPropagation();

                    // clicked on the expander

                    // expand/collapse	

                    var q = $(e.currentTarget);

                    //var p = q.parent();
                    //var o = q.next().data("d");     // mj-content

                    var p = q.closest(".mj-item");
                    var o = p.data("d");

                    if (q.hasClass("mj-open")) {

                        // collapse

                        q.removeClass("mj-open").addClass("mj-closed");

                        if (o.closed_icon)
                            q.css("background-image", "url('" + o.closed_icon + "')");

                        self.$el.trigger("collapse", o);
                    }
                    else {

                        // expand

                        q.removeClass("mj-closed").addClass("mj-open");

                        if (o.open_icon)
                            q.css("background-image", "url('" + o.open_icon + "')");

                        self.$el.trigger("expand", o);
                    }
                    
                    //p.next().slideToggle(s.animation_duration);
                    p.find(".mj-list:first").slideToggle(s.animation_duration);
                });
                
                this.$el.find("click", ".mj-content").unbind('click');

                this.$el.on("click", ".mj-content", function (e) {

                    // clicked on the checkbox or text

                    e.preventDefault();
                    e.stopPropagation();

                    var o = $(e.currentTarget).data("d");

                    if (o) {

                        if (o.disabled)
                            return;

                        if (s.show_checkboxes) {

                            if (o.checked == 1)
                                self.uncheck(o.id);
                            else
                                self.check(o.id);

                            self.$el.trigger("checkChange", o);
                        }
                        else {

                            if (o.selected)
                                self.deselect(o.id);
                            else
                                self.select(o.id);

                            self.$el.trigger("selected", o);
                        }
                    }
                    else {

                        mjcore.mjError("mjTreeView: node click: node " + id + " not found");
                    }
                });

                // see: https://github.com/ilikenwf/nestedSortable

                function isAllowed(placeholder, placeholderParent, currentItem) {

                    // disallow dragging a node with subitems

                    if ($(currentItem).hasClass("mj-leaf") )
                        return true;

                    return false;
                }

                if (s.dragdrop) {

                    this.$el.find(".mj-root").nestedSortable({

                        listType: "ul",                        

                        handle: 'div',
                        items: 'li',
                        //protectRoot: false,
                        //isAllowed: isAllowed,
                        isTree: true,
                        maxLevels: 3,
                        //toleranceElement: '> div',

                        //handle: 'div',
                        //helper:	'clone',
                        //items: 'li',
                        //opacity: .6,
                        //placeholder: 'placeholder',
                        revert: 250,
                        //tabSize: 25,
                        //tolerance: 'pointer',
                        //toleranceElement: '> div',
                        //maxLevels: 4,
                        //isTree: true,
                        //expandOnHover: 700,
                        //startCollapsed: false,
                        doNotClear: true,

                        //relocate: function(e, ui)
                        //{
                        //    mjcore.isEmpty("relocate");

                        //    mjcore.isEmpty(ui);
                        //},

                        update: function (event, ui) {

                            // refill the data array

                            self.toArray();

                            self.$el.trigger("dragend");

                            //var arr = self.$el.find(".mj-treeview .mj-root").nestedSortable("toArray", { startDepthCount: 0 });

                            //mjcore.isEmpty(arr);
                        }
                    });
                }
            },

            _stopListening: function () {
                this.$el.off();
            },            

            _renderItem: function (o)
            {
                var s = this.settings;

                // creates an li element

                /* every li contains 1 or 2 sub elements:
                
                     <li class='mj-item'>
                        <div ... mj-expander, mj-content etc></div>
                        <ul class='mj-list'> optional
                     </li>
                */

                var i = $("<li>", { 'class': 'mj-item' });
                //var i = $("<li>", { 'class': 'mj-item', 'id': o.id });

                var data_clone = mjcore.clone(o);
                delete data_clone.items;

                i.data("d", data_clone);

                var e = $("<div>", { 'class': 'mj-item-inner' });

                if (o.items) {

                    // if the item has child nodes, even if the items array is empty create an expander

                    var q = $("<div>", { 'class': 'mj-expander' });

                    q.addClass("mj-closed");

                    if (o.closed_icon)
                        q.css("background-image", "url('" + o.closed_icon + "')");

                    e.append(q);
                }

                // make the content: checkbox, image, text

                var c = $("<div>", { 'class': 'mj-content' });

                if (o.disabled)
                    c.addClass("mj-disabled");

                // cant be selected and disabled

                if (o.selected && !o.disabled)
                    c.addClass("selected");

                var str;

                if (s.show_checkboxes)
                {
                    var checked = "";

                    switch (o.checked) {
                        case 1: checked = " checked"; break;
                        case 2: checked = " half-ticked"; break;
                    }

                    str = "<div class='mj-checkbox-box" + checked + "'><div class='mj-tick'></div></div>";
                    c.append(str);                    
                }

                // add the image

                if (o.image) {

                    str = "<img class='mj-image ' src='" + o.image + "' />";
                    c.append(str);
                }

                if (this.settings.itemRender) {

                    // apply custom render function

                    var level = 0;                                       
                    
                    str = s.itemRender(o, level);
                }
                else {

                    // no custom render function, add in the text

                    //str = "<span class='mj-text'>" + o.text + "</span>";

                    if (s.wrap_text)
                        str = "<div class='mj-text'>" + o.text + "</div>";
                    else
                        str = "<div class='mj-text mj-nowrap'>" + o.text + "</div>";
                }

                c.append(str);

                // associate data with mj-content as well

                c.data("d", data_clone);

                e.append(c);

                i.append(e);

                return i;
            },

            _renderNode: function (o) {

                var self = this;

                // create the item

                var i = self._renderItem(o);

                if (o.items) {

                    // create a subtree
                    // NOTE: the subtree could be empty

                    var list = $("<ul>", { 'class': 'mj-list' });

                    list.css("display", "none");      // close the child nodes

                    for (var j = 0; j < o.items.length; j++) {

                        var q = o.items[j];

                        list.append( self._renderNode(q) );
                    }

                    i.append(list);
                }
                else {
                    i.addClass("mj-leaf");
                }

                return i;
            },

            _redraw: function (list, rootnodes) {

                var self = this;

                if (!rootnodes)
                    return;

                // create the top level nodes

                for (var i = 0; i < rootnodes.length; i++)
                {
                    var o = rootnodes[i];

                    var node = self._renderNode(o);

                    list.append(node);
                }
            },

            _render: function () {

                var s = this.settings;

                var a = $("<div>", { 'class': 'mj-widget mj-treeview' });

                var b = $("<ul>", { 'class': 'mj-list mj-root' });

                a.html(b);                

                this._redraw(b, s.items);

                this.$el.html(a);

                //this.$el.find(".mj-treeview").css({ width: this.settings.width, height: this.settings.height });

                // change indent levels

                this.$el.find(".mj-treeview .mj-item .mj-list").css("padding-left", s.sublist_indent);

                if (s.show_checkboxes)
                    this.$el.find(".mj-treeview .mj-leaf").css("padding-left", 16);

                this.saveState();        // save state

                return this;
            },

            //_recurseUp: function (id, callback) {

            //    var self = this;

            //    if (!id || !callback)
            //        return;

            //    var e = this._getElement(id);

            //    if (!e)
            //        return;

            //    var c = $(e).parents("ul").first();

            //    c = c.parents("ul").first();

            //    if (c && c.length > 0)
            //    {
            //        var d = c.data("d");

            //        callback(d);
            //        this._recurseUp(d.id, callback);
            //    }
            //},

            //_recurseDown: function (o, callback) {

            //    var self = this;

            //    if (!o || !callback)
            //        return;
                
            //    callback(o);

            //    if (o.items) {

            //        $.each(o.items, function (index, x) {

            //            self._recurseDown(x, callback);
            //        });
            //    }
            //},

            getChildren: function(id)
            {
                var e = this._getElement(id);

                if (e)
                {
                    var arr = [];

                    $.each(e.find("li.mj-item"), function (index, ee) {

                        arr.push($(ee).data("d"));
                    });

                    return arr;
                }

                return [];
            },

            //----------------------------------------------------------------------------
            // public interface
            //----------------------------------------------------------------------------

            getItem: function (id) {

                // get the data for an iten

                var e = this._getElement(id);

                if (!e)
                    return null;

                return e.data("d");
            },

            _getElement: function (id) {

                var list = this.$el.find("li");

                var filtered = list.filter(function (index) { return $(this).data("d").id == id; });

                if (filtered.length == 0)
                    return null;

                return filtered;
            },

            clear: function()
            {
                // empty the data and list

                this.settings.items = [];

                var e = this.$el.find(".mj-root");

                e.empty();
            },

            search: function (search_function) {

                // use user supplied function which returns true or false to test each object
                // returns an array of items

                if (!search_function)
                    return [];

                var list = this.$el.find(".mj-item");

                return list.filter(function (index) {

                    var o = $(this).data("d");

                    return search_function(o);
                });
            },

          

            //------------------------------------------------------------------------------------------------
            // enable, disable functions

            enableAll: function () {

                this.$el.find(".mj-item").removeClass("mj-disabled");

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").disabled = false; });
            },

            disableAll: function () {

                this.$el.find(".mj-item").addClass("mj-disabled");

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").disabled = true; });
            },

            enable: function (id) {

                var e = this._getElement(id);

                if (e) {
                    var o = e.data("d");
                    o.disabled = false;                    
                    e.removeClass("mj-disabled");
                }
            },

            disable: function (id) {

                var e = this._getElement(id);

                if (o) {
                    var o = e.data("d");
                    o.disabled = true;                    
                    e.addClass("mj-disabled");
                }
            },

            //---------------------------------------------------------------------------------------------------------
            // checkbox functions

            toggle: function (id) {

                var o = this.getItem(id);

                if (!o)
                    return;

                if (this.settings.show_checkboxes) {

                    if (o.checked == 1)
                        this.uncheck(id);
                    else
                        this.check(id);
                }
                else {

                    if (o.selected)
                        this.deselect(id);
                    else
                        this.select(id);
                }
            },

            checkAll: function () {

                if (!this.settings.show_checkboxes)
                    return;

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").checked = 1; });

                this.$el.find(".mj-checkbox-box").addClass("checked").removeClass("half-ticked");
            },

            uncheckAll: function () {

                if (!this.settings.show_checkboxes)
                    return;

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").checked = 0; });

                this.$el.find(".mj-checkbox-box").removeClass("checked").removeClass("half-ticked");
            },

            check: function (id, check_parents) {

                var self = this;

                if (!this.settings.show_checkboxes)
                    return;

                var e = this._getElement(id);

                if (e) {

                    var o = e.data("d");

                    if (o) {

                        o.checked = 1;

                        // check all sublist checkboxes 

                        e.find(".mj-checkbox-box").first().addClass("checked").removeClass("half-ticked");

                        if (this.settings.recursive) {

                            e.find(".mj-checkbox-box").addClass("checked").removeClass("half-ticked");

                            $.each(e.find("li"), function (index, i) {

                                var d = $(i).data("d");

                                if (d)
                                    d.checked = 1;
                            });

                            if (check_parents == true || check_parents == undefined) {

                                // check all parent checkboxes 

                                $.each(e.parents(".mj-item"), function (index, i) {

                                    var d = $(i).data("d");

                                    if (d) {
                                        d.checked = 1;
                                        $(i).find(".mj-checkbox-box").first().addClass("checked").removeClass("half-ticked");
                                    }
                                });
                            }
                        }
                    }
                }
                else {
                    mjcore.mjError("mjTreeView.check: node " + id + " not found");
                }
            },

            uncheck: function (id) {

                if (!this.settings.show_checkboxes)
                    return;

                var self = this;
                var e = this._getElement(id);

                if (e) {

                    var o = e.data("d");

                    if (o) {

                        o.checked = 0;

                        // deselect children of this node
                        // always do this, ignore settings.recursive, doesnt make sense to not deselect children

                        // check the children of this node

                        e.find(".mj-checkbox-box").removeClass("checked").removeClass("half-ticked");

                        $.each(e.find("li"), function (index, i) {

                            var d = $(i).data("d");

                            if (d)
                                d.checked = 0;
                        });
                    }
                    else {
                        mjcore.mjError("mjTreeView.uncheck: node " + id + " not found");
                    }
                }
            },

            checkAt: function (n) {

                var arr = this.$el.find(".mj-item");                

                if (n < 0 || n >= arr.length)
                    return;

                var e = arr[n];

                if (e)
                    this.check($(e).data("d").id);
            },

            uncheckAt: function (n) {                

                var arr = this.$el.find(".mj-item");

                if (n < 0 || n >= arr.length)
                    return;

                var e = arr[n];

                if (e)
                    this.uncheck($(e).data("d").id);
            },

            getChecked: function () {

                // return array of checked items

                var arr = [];

                $.each(this.$el.find(".mj-item"), function (index, e) {

                    if ($(e).data("d").checked == 1)
                    {
                        o.index = index;
                        arr.push(o);
                    }                        
                });

                return arr;
            },

            halfTick: function (id) {

                if (!this.settings.show_checkboxes)
                    return;

                var o = this.getItem(id);

                if (o) {
                    var e = this._getElement(id);

                    if (e) {

                        this.uncheck(id);       // uncheck child nodes

                        o.checked = 2;

                        e.find(".mj-checkbox-box").removeClass("checked").addClass("half-ticked");                     
                    }
                }
                else {                    
                    mjcore.mjError("mjTreeView.halfTick: node " + id + " not found");
                }
            },

            halfTickAt: function (n) {

                var list = this.$el.find(".mj-item");

                if (n < 0 || n >= list.length)
                    return;

                var o = $(list[n]).data("d");

                if (o)
                    this.halfTick(o.id);
            },

            halfTickAll: function () {

                if (!this.settings.show_checkboxes)
                    return;

                // dont call halfTick for every node, too slow

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").checked = 2; });

                this.$el.find(".mj-checkbox-box").removeClass("checked").addClass("half-ticked");
            },

            deselectHalfTicked: function () {

                if (!this.settings.show_checkboxes)
                    return;

                // dont call halfTick for every node, too slow
                // deselect all nodes which are half ticked

                $.each(this.$el.find(".mj-item"), function (index, e) {

                    var o = $(e).data("d");

                    if (o.checked == 2)
                        o.checked = 0;
                });

                this.$el.find(".mj-checkbox-box.half-ticked").removeClass("half-ticked");
            },

            //--------------------------------------------------------------------------
            // select functions

            select: function (id) {

                if (this.settings.show_checkboxes)
                    return;

                var e = this._getElement(id);

                if (!e)
                    return;

                var o = e.data("d");

                if (o) {

                    if (!this.settings.multi_select)
                        this.deselectAll();

                    o.selected = true;
                    e.find(".mj-content:first").addClass("selected");
                }
                else {
                    mjcore.mjError("mjTreeView.select: node " + id + " not found");
                }
            },

            deselect: function (id) {

                var self = this;

                if (this.settings.show_checkboxes)
                    return;

                var e = this._getElement(id);

                var o = e.data("d");

                if (o) {                    

                    o.selected = false;
                    e.find(".mj-content:first").removeClass("selected");
                }
                else {

                    mjcore.mjError("mjTreeView.deselect: node " + id + " not found");
                }
            },

            getSelected: function () {

                var arr = [];

                $.each(this.$el.find(".mj-item"), function (index, e) {

                    var o = $(e).data("d");

                    if (o.selected) {
                        o.index = index;
                        arr.push(o);
                    }
                });

                return arr;
            },

            selectAll: function () {

                if (this.settings.show_checkboxes)
                    return;

                // dont call select for every node, too slow

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").selected = true; });

                this.$el.find(".mj-content").addClass("selected");
            },

            deselectAll: function () {

                if (this.settings.show_checkboxes)
                    return;

                // dont call deselect for every node, too slow

                $.each(this.$el.find(".mj-item"), function (index, e) { $(e).data("d").selected = false; });

                this.$el.find(".mj-content").removeClass("selected");
            },

            selectAt: function (n) {

                var list = this.$el.find(".mj-content");

                if (n < 0 || n >= list.length)
                    return;

                var o = $(list[n]).data("d");

                if (o)
                    this.select(o.id);
            },

            deselectAt: function (n) {

                var list = this.$el.find(".mj-content");

                if (n < 0 || n >= list.length)
                    return;

                var o = $(list[n]).data("d");

                if (o)
                    this.deselect(o.id);
            },

            //--------------------------------------------------------------------------------------------------------------

            toArray: function()
            {
                // return an array which is a flat structure of the tree contents
                // arr = [{id, pid, data}
                //        ...
                //       ]

                var arr = [];

                var list = this.$el.find("li.mj-item")

                $.each(list, function (index, e) {

                    var o = $(e).data("d");

                    delete o.items;         // destroy the items array

                    o.pid = null;

                    var c = $(e).parent().closest("li");    // if there is a li above this li 

                    // set the pid field

                    if (c && c.length > 0)
                        o.pid = c.data("d").id;                    

                    arr.push(o);
                });

                return arr;
            },

            toTree: function()
            {
                var arr = this.toArray();

                var rootnodes = [];

                $.each(arr, function (index, o) {

                    if (o.pid == null)
                        rootnodes.push(o);

                    $.each(arr, function (index, x) {

                        if (x.pid && x.pid == o.id) {

                            if (!o.items)
                                o.items = [];

                            o.items.push(x);
                        }
                    });

                });

                return rootnodes;
            },

            sort: function(callback)
            {
                var self = this;

                var rootnodes = this.toTree();

                this._sort(rootnodes, callback);

                // rebuild the node map

                var tree = [];

                var e = this.$el.find(".mj-root ");

                e.empty();

                this._redraw(e, tree);
            },

            _sort: function(items, callback, direction)
            {
                var self = this;
                
                if (callback) {

                    items.sort(function (a, b) { return callback(a, b); });
                }
                else {

                    // no callback function provided, compare text fields

                    items.sort(function (a, b) {

                        if (!direction || direction.toLowerCase() == "asc")
                        {
                            if (a.text.toLowerCase() > b.text.toLowerCase())
                                return 1;

                            if (a.text.toLowerCase() < b.text.toLowerCase())
                                return -1;
                        }
                        else
                        {
                            if (a.text.toLowerCase() < b.text.toLowerCase())
                                return 1;

                            if (a.text.toLowerCase() > b.text.toLowerCase())
                                return -1;
                        }
                            

                        return 0;
                    });
                }
               
                $.each(items, function (index, o) {

                    if (o.items)
                        self._sort(o.items, callback);
                });
            },

            getSiblings: function (id) {

                var self = this;

                var e = this._getElement(id);

                var siblings = [];

                if (e) {

                    e = e.parent(); // the ul element

                    var arr = e.children("li.mj-item");

                    $.each(arr, function (index, o) {

                        var x = $(o).data("d");
                        siblings.push(x);
                    });
                }

                return siblings;
            },

            //----------------------------------------------------------------------------------------------------
            // add, insert, update, remove

            addBefore: function(id, data)
            {
                // create a sibling node

                if (!data)
                    return;               

                if (!id)                    
                    return this.addRootNode(data);                

                var o = this.getItem(id);

                if (!o)
                    return null;

                this._validateItem(data);

                var e = this._getElement(id);

                if (e) {
                        
                    var i = this._renderItem(data);
                    e.prepend(i);
                }

                return o.id;
            },

            addAfter: function(id, data)
            {
                // create a sibling node

                if (!data)
                    return null;

                if (!id)
                    return this.addRootNode(data);

                var o = this.getItem(id);

                if (!o)
                    return null;

                this._validateItem(data);

                var e = this._getElement(id);

                if (e) {

                    var i = this._renderItem(data);
                    e.append(i);
                }

                return o.id;
            },

            addRootNode: function(data)
            {
                if (!data)
                    return null;

                this._validateItem(data);
                
                // add new root node at the end of the list

                var x = this._renderNode(data);

                var e = this.$el.find(".mj-root");

                e.append(x);

                return data.id;
            },

            addChild: function(id, data)
            {
                if (!data)
                    return null;

                var c = mjcore.clone(data);     // clone the data

                if (!id)
                    return this.addRootNode(c);

                // create a child node

                var o = this.getItem(id);

                if (!o)
                    return null;

                this._validateItem(c);

                // the item must be rendered as a non leaf node

                o.items = this.getChildren(o.id);

                o.items.push(c);

                var node = this._renderNode(o);

                var e = this._getElement(o.id);

                if (e)
                    e.replaceWith(node);

                return o.id;
            },

            update: function (id, data) {

                if (!data)
                    return;

                this._validateItem(data);

                var e = this._getElement(id);

                if (e) {

                    var i = this._renderItem(data);
                    e.replaceWith(i);
                }

                return data.id;
            },

            remove: function (id) {

                // remove a node and all its children

                var e = this._getElement(id);
                
                if (!e)
                    return;

                e.data("d", null);
                e.children().off();
                e.remove();        
            },

            //------------------------------------------------------------------------------------

            expand: function (id) {

                var s = this.settings;

                var e = this._getElement(id);

                if (!e)
                    return;

                o = e.data("d");

                if (o.disabled)
                    return;

                var q = e.find(".mj-expander").first();

                if (!q)
                    return;

                if (!q.hasClass("mj-closed"))
                    return;     // already expanded

                q.removeClass("mj-closed").addClass("mj-open");
                //this.$el.trigger("expand", o);

                if (o.open_icon)
                    q.css("background-image", "url('" + o.open_icon + "')");

                q = e.find("ul.mj-list").first();

                q.slideDown(s.animation_duration);
            },

            collapse: function (id) {

                var s = this.settings;

                var e = this._getElement(id);

                if (!e)
                    return;

                o = e.data("d");

                if (o.disabled)
                    return;

                // collapse children first

                var items = this.getChildren(id);

                for (var i = 0; i < items.length; i++)
                    this.collapse(items[i].id);

                var q = e.find(".mj-expander");

                if (!q)
                    return;

                if (!q.hasClass("mj-open"))
                    return;     // already closed

                q.removeClass("mj-open").addClass("mj-closed");
                this.$el.trigger("collapsed", o);

                if (o.closed_icon)
                    q.css("background-image", "url('" + o.closed_icon + "')");

                q = e.find("ul.mj-list").first();

                q.slideUp(s.animation_duration);
            },

            expandAll: function () {

                var self = this;

                $.each(this.$el.find("li.mj-item"), function (index, e) { var id = $(e).data("d").id; self.expand(id); });
            },

            collapseAll: function () {

                var self = this;

                $.each(this.$el.find("li.mj-item"), function (index, e) { var id = $(e).data("d").id; self.collapse(id); });
            },

            //--------------------------------------------------------------------
            // misc

            saveState: function () {

                // save the state of the list

                var self = this;

                this.original_data = [];

                var items = this.toArray();

                $.each(items, function (index, o) {
                    self.original_data.push({ checked: o.checked, selected: o.selected });
                });
            },

            hasChanged: function () {

                var items = this.toArray();

                for (var i = 0, len1 = items.length, len2 = this.original_data.length; i < len1 && i < len2; i++) {

                    var a = items[i];
                    var b = this.original_data[i];

                    // if new state is undefined dont count it as a change

                    if (a.checked != b.checked || a.selected != b.selected)
                        return true;
                }

                return false;
            },

            close: function () {

                // dont clear the data
                // important to turn off events

                this._stopListening();
                this.$el.data(this, 'mj-treeview-data', null);
                this.$el.html("");
            },

            scrollTo: function (n, animate) {

                var e = this._getElement(n);

                if (e) {

                    // need to use position rather than offset

                    var pos = e.position().top;

                    if (animate)
                        this.$el.find(".mj-root").animate({ scrollTop: pos }, 300);
                    else
                        this.$el.find(".mj-root").scrollTop(pos);
                }
            }
        }

        $.fn.mjTreeView = function (options) {

            // options is empty or an object
            // within a plugin use this not $(this)
            // check that element exists using this.length

            if (!this.length) {

                mjcore.mjError("mjTreeView: the html element to attach to '" + this.selector + "' does not exist");
                return null;
            }

            if (mjTreeView[options]) {

                var q = $(this).data('mj-treeview-data');

                if (q)
                    return q[options].apply(q, Array.prototype.slice.call(arguments, 1));
            }
            else if (!options || typeof options === 'object') {

                // return is for chainability, dont have to return anything
                // if the selector was multiply defined you would be creating plugin for each selector

                return this.each(function () {
                    var treeview = Object.create(mjTreeView);
                    treeview.init(options, this);
                    $.data(this, 'mj-treeview-data', treeview);
                });
            }
            else {

                // method does not exist

                mjcore.mjError("mjTreeView: Method '" + options + "' does not exist on mjTreeView");
            }
        };
    })(jQuery);

});